name: 'Verify EC2 IaC'

on:
  push:
    branches:
    - main
  pull_request:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  provision_environment:
    name: 'Provision EC2 instance'
    runs-on: ubuntu-latest
    outputs:
      ec2_url: ${{ steps.save_terraform.outputs.ec2_url }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Following used for ACT debugging
    - name: Install Buster prereqs when debugging from CLI (set act environment variable)
      if: env.act
      run: |
        apt update
        apt install unzip

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new Terraform working directory, verify the format, and execute the plan
    - name: Initialize and Plan
      working-directory: ./aws/ec2
      run: |
        terraform init
        # terraform fmt -check
        terraform plan

    # Abort if the plan failed
    - name: Abort on Terrafor failures
      if: steps.plan.outcome == 'failure'
      run: exit 1
      
    # Apply the plan to the environment
    - name: Apply Terraform plan
      working-directory: ./aws/ec2
      run: |
        terraform apply -auto-approve
        terraform output > ${{ github.workspace }}/terraform.output

    - name: Determine Terraform output
      uses:  ./private-actions/shellify-terraform-output
      with:
        terraform-output-file: ${{ github.workspace }}/terraform.output
        shell-output-file: ${{ github.workspace }}/tf_output.sh

    - name: Save Terraform outputs
      id: save_terraform
      run: |
        . ${{ github.workspace }}/tf_output.sh
        echo "Retrieved output $url"
        echo "::set-output name=ec2_url::$url"
      
  verify_environment:
    name: 'Verify EC2 instance'
    runs-on: ubuntu-latest
    needs: provision_environment
    environment: 
      name: cloud-staging
      url: 'http://${{needs.provision_environment.outputs.ec2_url}}'

    steps:
    # Allow up to 3-minutes for the instance to spin up and reply
    - name: Verify endpoint    
      run: |
        echo 'Retrieved Terraform output: '
        echo 'Pinging endpoint: ${{needs.provision_environment.outputs.ec2_url}}'
        curl --retry 11 --retry-delay 15 ${{needs.provision_environment.outputs.ec2_url}}

  destroy_environment:
    name: 'Destroy EC2 instance'
    runs-on: ubuntu-latest
    needs: verify_environment
    environment: cloud-cleanup
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new Terraform and destroy the environment
    - name: Destroy environment
      working-directory: ./aws/ec2
      run: |
        terraform init
        # terraform plan
        terraform destroy -auto-approve



# ----
